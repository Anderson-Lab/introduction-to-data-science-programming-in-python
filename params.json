{"name":"Introduction to Data Science Programming in Python","tagline":"","body":"# Anderson Data Science Research Lab\r\n<p align=\"justify\">\r\n<a href=\"http://anderson-lab.github.io/\"><img src=\"http://freyja.cs.cofc.edu/Paul-labs-logo.png\" alt=\"Data Science Research Lab\" height=\"100\" align=\"right\" hspace=\"10px\"></a>The Anderson Data Science Research Lab applies and develops algorithms in data mining, machine learning, and artificial intelligence to the fields of big data, knowledge discovery, bioinformatics, genomics, and metabolomics. The material presented here is available under the MIT License. </p>\r\n\r\n# Lists\r\nTake-aways: Great for collecting items. Notice that you can mix types.\r\n\r\n\r\n```python\r\nmylist = [0, 3, 2, 'hi']\r\nmylist[0] = 2\r\nprint mylist[0]\r\n```\r\n\r\n    2\r\n\r\n\r\n## Making a Copy\r\n\r\n\r\n```python\r\nimport copy\r\nclist = copy.deepcopy(mylist) # Necessary if you have nested objects\r\n```\r\n\r\n## Slicing\r\n\r\n\r\n```python\r\nprint mylist[2:4] # Returns elements in index 2 and 3.\r\nprint mylist[0:4:2] # mylist[start:end:step]\r\nprint mylist[:] # Returns the whole list and a shallow copy\r\n```\r\n\r\n    [2, 'hi']\r\n    [2, 2]\r\n    [2, 3, 2, 'hi']\r\n\r\n\r\n## Sorting\r\n\r\n\r\n```python\r\nmylist.sort()\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi']\r\n\r\n\r\n## Other functions\r\n\r\n\r\n```python\r\nmylist.append(3)\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi', 3]\r\n\r\n\r\n\r\n```python\r\nprint mylist.count('hi')\r\nprint mylist.count(3)\r\n```\r\n\r\n    1\r\n    2\r\n\r\n\r\n\r\n```python\r\notherlist = [-1,-2,-3]\r\nmylist.extend(otherlist)\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 'hi', 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nmylist.index(2)\r\n```\r\n\r\n\r\n\r\n\r\n    0\r\n\r\n\r\n\r\n\r\n```python\r\nmylist.index(-5)\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    ValueError                                Traceback (most recent call last)\r\n\r\n    <ipython-input-20-c383587f266d> in <module>()\r\n    ----> 1 mylist.index(-5)\r\n    \r\n\r\n    ValueError: -5 is not in list\r\n\r\n\r\n\r\n```python\r\nmylist.insert(1,'a')\r\n```\r\n\r\n\r\n```python\r\nprint mylist\r\n```\r\n\r\n    [2, 'a', 2, 3, 'hi', 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nprint mylist.pop(1)\r\n```\r\n\r\n    a\r\n\r\n\r\n\r\n```python\r\nprint mylist.remove('hi')\r\n```\r\n\r\n    None\r\n\r\n\r\n\r\n```python\r\nprint mylist\r\n```\r\n\r\n    [2, 2, 3, 3, -1, -2, -3]\r\n\r\n\r\n\r\n```python\r\nmylist.reverse()\r\nprint mylist\r\n```\r\n\r\n    [-3, -2, -1, 3, 3, 2, 2]\r\n\r\n\r\n\r\n```python\r\nanotherlist = [-3,-2,-1,0,0,-2,2]\r\nmylist == anotherlist\r\n```\r\n\r\n\r\n\r\n\r\n    False\r\n\r\n\r\n\r\n# Tuples\r\nA tuple is an immutable list (read-only, doesn't change). You can reference them in the same way as lists for the most part.\r\n\r\n\r\n```python\r\nmytuple = (0, 3, 2, 'h')\r\nprint mytuple[1]\r\n```\r\n\r\n    3\r\n\r\n\r\n\r\n```python\r\nmytuple[1] = 4\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    TypeError                                 Traceback (most recent call last)\r\n\r\n    <ipython-input-29-6b61a51d3ea0> in <module>()\r\n    ----> 1 mytuple[1] = 4\r\n    \r\n\r\n    TypeError: 'tuple' object does not support item assignment\r\n\r\n\r\n# Dictionaries\r\nA dictionary is a key-value data structure that allows you to reference each element by a key.\r\n\r\n\r\n```python\r\nmonths = {'Jan': 31, 'Feb': 28, 'Mar': 31}\r\nprint months['Jan']\r\n```\r\n\r\n    31\r\n\r\n\r\n\r\n```python\r\nprint months.keys()\r\n```\r\n\r\n    ['Jan', 'Mar', 'Feb']\r\n\r\n\r\n\r\n```python\r\nprint months.items()\r\n```\r\n\r\n    [('Jan', 31), ('Mar', 31), ('Feb', 28)]\r\n\r\n\r\n\r\n```python\r\nfor key in months:\r\n    print key\r\n```\r\n\r\n    Jan\r\n    Mar\r\n    Feb\r\n\r\n\r\n\r\n```python\r\nfor (key,value) in months.items():\r\n    print key,value\r\n```\r\n\r\n    Jan 31\r\n    Mar 31\r\n    Feb 28\r\n\r\n\r\n# A quick comparison to R and MATLAB\r\n- Indexing starts at 0.\r\n- All three are scripting languages.\r\n- R and Python are open source and freely available languages.\r\n- All three have a great set of available add-on packages.\r\n\r\n# Writing and Importing Code\r\nTwo ways to import code\r\n- import name\r\n- from name import *\r\n\r\n\r\n```python\r\nimport sys\r\nsys.path.append('mypath') # Appends mypath to the system path.\r\n```\r\n\r\n# Control Flow\r\n\r\n\r\n```python\r\na = 2\r\nif a == 1:\r\n    print 1\r\nelif a == 2:\r\n    print 2\r\nelse:\r\n    print 'otherwise'\r\n```\r\n\r\n    2\r\n\r\n\r\n\r\n```python\r\nfor key in months:\r\n    print key\r\n```\r\n\r\n    Jan\r\n    Mar\r\n    Feb\r\n\r\n\r\n\r\n```python\r\ni = 0\r\nwhile i < len(mylist):\r\n    print mylist[i]\r\n    i = i + 1\r\n```\r\n\r\n    -3\r\n    -2\r\n    -1\r\n    3\r\n    3\r\n    2\r\n    2\r\n\r\n\r\n# Functions\r\n\r\n\r\n```python\r\ndef pythagoras(x,y):\r\n    \"\"\" Computes the hypotenuse of two arguments\"\"\"\r\n    h = pow(x**2+y**2,0.5)\r\n    return h\r\nprint pythagoras(3,4)\r\n```\r\n\r\n    5.0\r\n\r\n\r\n# Map and Lambda\r\n- If you want to apply the same function to a list of items, use Map\r\n- If you want to create an anonymous and temporary function, use Lambda\r\n\r\n\r\n```python\r\nalist = [2,3,4]\r\nmap(lambda x:pow(x,3) + 7,alist)\r\n```\r\n\r\n\r\n\r\n\r\n    [15, 34, 71]\r\n\r\n\r\n\r\n\r\n```python\r\nfilter(lambda x:x > 2,alist)\r\n```\r\n\r\n\r\n\r\n\r\n    [3, 4]\r\n\r\n\r\n\r\n# Exceptions\r\n\r\n\r\n```python\r\nx = 1\r\ny = 'a'\r\ntry:\r\n    x/y\r\nexcept ZeroDivisionError:\r\n    print \"Divisor must not be 0\"\r\nexcept TypeError:\r\n    print \"They must be numbers\"\r\nexcept:\r\n    print \"Something unspecified went wrong\"\r\nelse:\r\n    print \"Everything worked!\"\r\n```\r\n\r\n    They must be numbers\r\n\r\n\r\n\r\n```python\r\nx = 1\r\ny = 0\r\ntry:\r\n    x/y\r\nexcept ZeroDivisionError:\r\n    print \"Divisor must not be 0\"\r\nexcept TypeError:\r\n    print \"They must be numbers\"\r\nexcept:\r\n    print \"Something unspecified went wrong\"\r\nelse:\r\n    print \"Everything worked!\"\r\n```\r\n\r\n    Divisor must not be 0\r\n\r\n\r\n# Classes\r\n\r\n\r\n```python\r\nclass CofC:\r\n    def __init__(self,bestDept):\r\n        self.bestDept = bestDept\r\n    \r\n    def whatIsTheBestDepartment(self):\r\n        return self.bestDept\r\n```\r\n\r\n\r\n```python\r\nuniv = CofC('Computer Science')\r\nprint univ.whatIsTheBestDepartment()\r\n```\r\n\r\n    Computer Science\r\n\r\n\r\n# Using NumPy and Matplotlib\r\n- Python isn't really good at numerical processing by default.\r\n- That is why we use other packages.\r\n\r\n\r\n```python\r\nimport numpy as np\r\n```\r\n\r\n## NumPy Arrays\r\n\r\n\r\n```python\r\nmyarray = np.array([4,3,2])\r\nmybigarray = np.array([[3,2,4],[3,3,2],[4,5,2]])\r\n```\r\n\r\n\r\n```python\r\nprint myarray\r\n```\r\n\r\n    [4 3 2]\r\n\r\n\r\n\r\n```python\r\nprint mybigarray\r\n```\r\n\r\n    [[3 2 4]\r\n     [3 3 2]\r\n     [4 5 2]]\r\n\r\n\r\nmybigarray is an example of how we will create matrices\r\n## Creation Functions\r\n\r\n\r\n```python\r\nnp.arange(5)\r\n```\r\n\r\n\r\n\r\n\r\n    array([0, 1, 2, 3, 4])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.arange(3,7,2) # start, stop, step\r\n```\r\n\r\n\r\n\r\n\r\n    array([3, 5])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.ones((3,4))\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  1.,  1.,  1.],\r\n           [ 1.,  1.,  1.,  1.],\r\n           [ 1.,  1.,  1.,  1.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.zeros((3,4))\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 0.,  0.,  0.,  0.],\r\n           [ 0.,  0.,  0.,  0.],\r\n           [ 0.,  0.,  0.,  0.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.eye(3)\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  0.,  0.],\r\n           [ 0.,  1.,  0.],\r\n           [ 0.,  0.,  1.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,3)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3.,  5.,  7.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,5)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3.,  4.,  5.,  6.,  7.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.linspace(3,7,6)\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 3. ,  3.8,  4.6,  5.4,  6.2,  7. ])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.r_[1:4,0,4] # Row concatenation\r\n```\r\n\r\n\r\n\r\n\r\n    array([1, 2, 3, 0, 4])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.c_[np.arange(3),np.arange(3)] # Column concatenation\r\n```\r\n\r\n\r\n\r\n\r\n    array([[0, 0],\r\n           [1, 1],\r\n           [2, 2]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.size(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    9\r\n\r\n\r\n\r\n\r\n```python\r\nnp.shape(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    (3, 3)\r\n\r\n\r\n\r\n\r\n```python\r\nprint np.arange(6)\r\nprint np.arange(6).reshape(3,2)\r\n```\r\n\r\n    [0 1 2 3 4 5]\r\n    [[0 1]\r\n     [2 3]\r\n     [4 5]]\r\n\r\n\r\n\r\n```python\r\nnp.ravel(np.eye(3))\r\n```\r\n\r\n\r\n\r\n\r\n    array([ 1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.arange(6)[::-1] # Reverse the order\r\n```\r\n\r\n\r\n\r\n\r\n    array([5, 4, 3, 2, 1, 0])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.min(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    0\r\n\r\n\r\n\r\n\r\n```python\r\nnp.max(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    5\r\n\r\n\r\n\r\n\r\n```python\r\nnp.copy(np.arange(6))\r\n```\r\n\r\n\r\n\r\n\r\n    array([0, 1, 2, 3, 4, 5])\r\n\r\n\r\n\r\n## Operations on arrays\r\n\r\n\r\n```python\r\na=np.arange(6).reshape(2,3)\r\nb=np.ones((2,3))\r\nprint a\r\nprint b\r\n```\r\n\r\n    [[0 1 2]\r\n     [3 4 5]]\r\n    [[ 1.  1.  1.]\r\n     [ 1.  1.  1.]]\r\n\r\n\r\n\r\n```python\r\na+b\r\n```\r\n\r\n\r\n\r\n\r\n    array([[ 1.,  2.,  3.],\r\n           [ 4.,  5.,  6.]])\r\n\r\n\r\n\r\n\r\n```python\r\na*(b+1) # Element wise operations!\r\n```\r\n\r\n\r\n\r\n\r\n    array([[  0.,   2.,   4.],\r\n           [  6.,   8.,  10.]])\r\n\r\n\r\n\r\n\r\n```python\r\nnp.dot(a,b) # Matrix multiplication, but the dimensions don't agree!\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    ValueError                                Traceback (most recent call last)\r\n\r\n    <ipython-input-71-c8af594e789d> in <module>()\r\n    ----> 1 np.dot(a,b) # Matrix multiplication, but the dimensions don't agree!\r\n    \r\n\r\n    ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)\r\n\r\n\r\n\r\n```python\r\nnp.dot(np.transpose(a),b)\r\n```\r\n\r\n\r\n```python\r\nnp.dot(a,np.transpose(b))\r\n```\r\n\r\n\r\n```python\r\npow(a,2)\r\n```\r\n\r\n## Random Numbers\r\n\r\n\r\n```python\r\nnp.random.rand(3,2) # uniformly distributed random numbers between 0 and 1\r\n```\r\n\r\n\r\n```python\r\nnp.random.randn(3,2) # normally distributed\r\n```\r\n\r\n\r\n```python\r\nnp.random.normal(1,2,(3,2)) # with mean of 1 and standard deviation of 2\r\n```\r\n\r\n\r\n```python\r\nnp.random.uniform(-1,3,(3,2)) # random uniform numbers between -1 and 3\r\n```\r\n\r\n\r\n```python\r\nnp.random.randint(1,10,(3,2)) # random integers between 1 and 10\r\n```\r\n\r\n# Plotting with MATPLOTLIB and PyLab\r\n\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# fake up some data\r\nspread = np.random.rand(50) * 100\r\ncenter = np.ones(25) * 50\r\nflier_high = np.random.rand(10) * 100 + 100\r\nflier_low = np.random.rand(10) * -100\r\ndata = np.concatenate((spread, center, flier_high, flier_low), 0)\r\n```\r\n\r\n\r\n```python\r\n# basic plot\r\nplt.boxplot(data);\r\n\r\n# notched plot\r\nplt.figure()\r\nplt.boxplot(data, 1);\r\n```\r\n\r\n\r\n```python\r\n# change outlier point symbols\r\nplt.figure()\r\nplt.boxplot(data, 0, 'gD');\r\n```\r\n\r\n\r\n![png](output_91_0.png)\r\n\r\n\r\n\r\n```python\r\n# don't show outlier points\r\nplt.figure()\r\nplt.boxplot(data, 0, '');\r\n\r\n# horizontal boxes\r\nplt.figure()\r\nplt.boxplot(data, 0, 'rs', 0);\r\n\r\n# change whisker length\r\nplt.figure()\r\nplt.boxplot(data, 0, 'rs', 0, 0.75);\r\n\r\n# fake up some more data\r\nspread = np.random.rand(50) * 100\r\ncenter = np.ones(25) * 40\r\nflier_high = np.random.rand(10) * 100 + 100\r\nflier_low = np.random.rand(10) * -100\r\nd2 = np.concatenate((spread, center, flier_high, flier_low), 0)\r\ndata.shape = (-1, 1)\r\nd2.shape = (-1, 1)\r\n# data = concatenate( (data, d2), 1 )\r\n# Making a 2-D array only works if all the columns are the\r\n# same length.  If they are not, then use a list instead.\r\n# This is actually more efficient because boxplot converts\r\n# a 2-D array into a list of vectors internally anyway.\r\ndata = [data, d2, d2[::2, 0]]\r\n# multiple box plots on one figure\r\nplt.figure()\r\nplt.boxplot(data);\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    AttributeError                            Traceback (most recent call last)\r\n\r\n    <ipython-input-73-9744903c53b9> in <module>()\r\n         17 flier_low = np.random.rand(10) * -100\r\n         18 d2 = np.concatenate((spread, center, flier_high, flier_low), 0)\r\n    ---> 19 data.shape = (-1, 1)\r\n         20 d2.shape = (-1, 1)\r\n         21 # data = concatenate( (data, d2), 1 )\r\n\r\n\r\n    AttributeError: 'list' object has no attribute 'shape'\r\n\r\n\r\n\r\n![png](output_92_1.png)\r\n\r\n\r\n\r\n![png](output_92_2.png)\r\n\r\n\r\n\r\n![png](output_92_3.png)\r\n\r\n\r\n### Some notes on plots and this notebook\r\n- The line at the top of this notebook is necessary to turn on inline plotting.\r\n- The ; that are added on the end of the plots hide object output that is also echoed.\r\n- For more examples, http://matplotlib.org/1.5.1/examples/index.html","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}